///////////////////////////////////////////////////////////////////
/// @file 		global.h
/// @brief		È«ï¿½Ö±ï¿½ï¿½ï¿½
///	@details	È«ï¿½Ö±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½å¼°ï¿½ï¿½Ê¼ï¿½ï¿½
/// @author		by DC(any question plese send 
///	@author				E-mail to 1160029144@qq.com)
/// @version	V1.0.0
/// @date 		2022-08-01
/// @copyright	Copyright (c) 2022 ï¿½ï¿½ï¿½ï¿½ï¿½Ðºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½É«ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Þ¹ï¿½Ë¾
///////////////////////////////////////////////////////////////////
#ifndef __GLOBAL_H__
#define __GLOBAL_H__

#include <rtthread.h>
#include "mycan.h"

#define REGISTERNUM0			100
#define REGISTERNUM1			1000
#define REGISTERNUM2			300
#define MAXSEGMENTS				50
#define OBJECTDICNUM			100
#define BASEINDEX				0x2000

typedef struct SoftwareInfo
{
	uint16_t majorVersionNum;				//ï¿½ï¿½ï¿½æ±¾ï¿½ï¿½
	uint16_t minorVersionNum;				//ï¿½Î°æ±¾ï¿½ï¿½
	uint16_t revisionNum;					//ï¿½Þ¶ï¿½ï¿½æ±¾ï¿½ï¿½
	uint16_t nonLabel;						//ï¿½ï¿½ï¿½ï¿½ï¿½Ç±ï¿½ï¿??
	uint16_t hardWareVersionNum;			//Ó²ï¿½ï¿½ï¿½æ±¾ï¿½ï¿½
}SoftwareInfo;

typedef struct Comm
{
	uint16_t holdingRegist0[REGISTERNUM0];	//LCDï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½LCDï¿½ï¿½Õ¹ï¿½ï¿½ï¿½ï¿½ï¿½ÐµÄ¼Ä´ï¿½ï¿½ï¿½
	uint16_t holdingRegist1[REGISTERNUM1];	//LCDï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è±¸Í¨Ñ¶ï¿½Ä¼Ä´ï¿½ï¿½ï¿??
	uint16_t holdingRegist2[REGISTERNUM2];	//LCDï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è±¸Í¨Ñ¶ï¿½ï¿½ï¿½Ô²ï¿½ï¿½ï¿½ï¿½Ä¼Ä´ï¿½ï¿½ï¿??
	uint8_t	segmentsNum;					//ï¿½ï¿½holdingï¿½Ä´ï¿½ï¿½ï¿½ï¿½Ä·Ö¶ï¿½ï¿½ï¿½
	uint16_t segmentTable[MAXSEGMENTS][2];	//ï¿½ï¿½holdingï¿½Ä´ï¿½ï¿½ï¿½ï¿½Ä·Ö¶ï¿½ï¿½ï¿½ï¿½Ý£ï¿½[][0]Îªï¿½Ö¶ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½Ö·ï¿½ï¿½[][1]Îªï¿½Ö¶ÎµÄ³ï¿½ï¿½ï¿½
	struct rt_messagequeue myMsg;			//ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½Ð¿ï¿½ï¿½Æ¿ï¿½
	uint16_t msgPool[15];					//ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ãµï¿½ï¿½Ä·ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½Ú´ï¿½ï¿??
	uint16_t recvData[REGISTERNUM1];		//Ö§ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½holdingï¿½Í¶ï¿½ï¿½holding
}Comm;

typedef struct CAN
{
	uint16_t id;
	uint32_t objData[OBJECTDICNUM];			//PCï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½PCï¿½ï¿½ï¿½ï¿½Õ¹ï¿½ï¿½Ö®ï¿½ï¿½Ä¶ï¿½ï¿½ï¿½ï¿½Öµï¿??(ï¿½ï¿½CANopen SDOï¿½ï¿½Ê½Í¨Ñ¶)
	rt_device_t can0_dev;            		// CANï¿½è±¸ï¿½ï¿½ï¿??
	rt_device_t can1_dev;            		// CANï¿½è±¸ï¿½ï¿½ï¿??

	enum CAN_MODE
	{
		CAN_READ4BYTE = 0,
		CAN_WRITE2BYTE = 2,
		CAN_WRITE4BYTE = 4
	}can_mode;
	
}CAN;

typedef struct System
{
	struct SoftwareInfo softwareInfo;		//ï¿½ï¿½ï¿½ï¿½ï¿½æ±¾ï¿½ï¿½Ï¢
	struct Comm comm;						//RS485Í¨Ñ¶
	struct CAN can;							//CANÍ¨Ñ¶
	uint16_t interfaceType;					//Ò£ï¿½Ø½Ó¿ï¿½ï¿½ï¿½ï¿½ï¿½
	uint16_t CCRConfig;						//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	
	myCAN mycan;
	
	uint64_t recvCnt;
	uint64_t sendCnt;
}System;

extern System sys;
extern rt_uint8_t g_send_enable;


#define GROUP_ID 1 
#define NODE_ID  1


#define CCR_EVENT_CODE_POWER_DOWN  	0X02
#define CCR_EVENT_CODE_OC   	   	0X04
#define CCR_EVENT_CODE_VA_DROPDOWN 	0X06
#define CCR_EVENT_CODE_BREAK_OFF   	0X07
#define CCR_EVENT_CODE_REG_FAULT   	0X08
#define CCR_EVENT_CODE_EFD_ALRM    	0X0A
#define CCR_EVENT_CODE_LFD_ALAMR   	0X0B
#define CCR_EVENT_CODE_MODULE_FALT 	0X0C

#define EVENT_OUTPUT_CHANGED  		0x01
#define EVENT_INTPUT_CHANGED  		0X02




#define UPS_EVENT_CODE_COMM_FAIL 0X0D
#define UPS_EVENT_CODE_POWER_FAIL 0X0E
#define UPS_EVENT_CODE_BATERY_LOW 0X0F


#endif
